<?phpclass DbHandler {    private $conn;    function __construct() {        require_once 'DbConnect.php';        $db = new DbConnect();        $this->conn = $db->connect();    }    public function createUser($name, $email, $password, $type = "patient") {        require_once 'PassHash.php';        if (!$this->userExists($email)) {            $salt = PassHash::generateSalt();            $password = PassHash::hashPassword($password, $salt);            $api_key = $this->generateApiKey();            $stmt = $this->conn->prepare("INSERT INTO users (name, email, password, salt, api_key, joined_at, type) values(?, ?, ?, ?, ?, ?, ?)");            $timestamp = $this->getTimestamp();            $stmt->bind_param("sssssss", $name, $email, $password, $salt, $api_key, $timestamp, $type);            $result = $stmt->execute();            $uid = $this->conn->insert_id;            $stmt->close();            if ($result) {                $response['result'] = USER_CREATED_SUCCESSFULLY;                $user['uid'] = $uid;                $user['api_key'] = $api_key;                $user['doctor'] = $type == 'doctor';                $response['user'] = $user;                $this->insertDefaultIndices($uid);            } else {                // Failed to create user                $response['result'] = USER_CREATE_FAILED;            }        } else {            $response['result'] = USER_ALREADY_EXISTED;        }        return $response;    }    public function loginUser($email, $password) {        require_once 'PassHash.php';        $stmt = $this->conn->prepare("SELECT uid, name, password, salt, api_key, type FROM users WHERE email = ?");        $stmt->bind_param("s", $email);        $stmt->execute();        $stmt->bind_result($uid, $name, $hashed_password, $salt, $api_key, $type);        $stmt->store_result();        if ($stmt->num_rows > 0) {            $stmt->fetch();            $stmt->close();            if ($hashed_password == PassHash::hashPassword($password, $salt)) {                $output['result'] = SUCCESS;                $user['uid'] = $uid;                $user['name'] = $name;                $user['api_key'] = $api_key;                $user['doctor'] = $type == 'doctor';                $output['user'] = $user;            } else {                $output['result'] = INVALID_COMBINATION;            }        } else {            $stmt->close();            $output['result'] = INVALID_COMBINATION;        }        return $output;    }    public function insertDefaultIndices($uid) {        $names = array(            "Heamoglobins",            "Hematocrite",            "Average red cells volume",            "Leucocytes",            "Lymphocytes",            "Thrombocytes",            "VSH"        );        $max_values = array(            14.6,            44,            32.3,            12.68,            45.7,            450,            20        );        $min_values = array(            11.9,            36,            27,            4.49,            18.3,            150,            0        );        $measurements = array(            "g/dL",            "%",            "pg/cells",            "1/ml",            "1/ml",            "1/ml",            "mm/h"        );        for ($i = 0; $i < count($names); $i++) {            $min_value = $min_values[$i];            $max_value = $max_values[$i];            $name = $names[$i];            $measurement = $measurements[$i];            $stmt = $this->conn->prepare("INSERT INTO indices (name, min_value, max_value, uid, measurement) values(?, ?, ?, ?, ?)");            $stmt->bind_param("sssss", $name, $min_value, $max_value, $uid, $measurement);            $stmt->execute();        }    }    public function userExists($email) {        $stmt = $this->conn->prepare("SELECT uid from users WHERE email = ?");        $stmt->bind_param("s", $email);        $stmt->execute();        $stmt->store_result();        $num_rows = $stmt->num_rows;        $stmt->close();        return $num_rows > 0;    }    public function getApiKeyById($user_id) {        $stmt = $this->conn->prepare("SELECT api_key FROM users WHERE uid = ?");        $stmt->bind_param("s", $user_id);        if ($stmt->execute()) {            $api_key = $stmt->get_result()->fetch_assoc();            $stmt->close();            return $api_key;        } else {            return NULL;        }    }    public function getUserId($api_key) {        $stmt = $this->conn->prepare("SELECT uid FROM users WHERE api_key = ?");        $stmt->bind_param("s", $api_key);        $stmt->execute();        $stmt->store_result();        $stmt->bind_result($user_id);        $stmt->fetch();        $stmt->close();        return $user_id;    }    public function isValidApiKey($api_key) {        $stmt = $this->conn->prepare("SELECT uid from users WHERE api_key = ?");        $stmt->bind_param("s", $api_key);        $stmt->execute();        $stmt->store_result();        $num_rows = $stmt->num_rows;        $stmt->close();        return $num_rows > 0;    }    private function generateApiKey() {        return md5(uniqid(rand(), true));    }    public function getIndices($uid) {        $stmt = $this->conn->prepare("SELECT id, name, max_value, min_value, measurement,        (SELECT value FROM indice_values WHERE indice_id = indices.id ORDER BY timestamp DESC LIMIT 1),        (SELECT timestamp FROM indice_values WHERE indice_id = indices.id ORDER BY timestamp DESC LIMIT 1)        FROM indices WHERE uid = ?");        $stmt->bind_param("s", $uid);        $stmt->execute();        $stmt->bind_result($id, $name, $max_value, $min_value, $measurement, $value, $timestamp);        $stmt->store_result();        $indices = array();        while ($stmt->fetch()) {            $ind["id"] = $id;            $ind["name"] = $name;            $ind["max_value"] = $max_value;            $ind["min_value"] = $min_value;            $ind["measurement"] = $measurement;            $ind["current_value"] = $value;            $ind["current_value_timestamp"] = $timestamp;            $indices[] = $ind;        }        return $indices;    }    public function getPatients($doctor_id) {        $stmt = $this->conn->prepare("SELECT u.uid, u.name, u.email FROM patients p INNER JOIN users u ON p.patient_id = u.uid WHERE p.doctor_id = ?");        $stmt->bind_param("s", $doctor_id);        $stmt->execute();        $stmt->bind_result($uid, $name, $email);        $stmt->store_result();        $users = array();        while ($stmt->fetch()) {            $user["uid"] = $uid;            $user["name"] = $name;            $user["email"] = $email;            $users[] = $user;        }        return $users;    }    public function isDoctor($uid) {        $stmt = $this->conn->prepare("SELECT type FROM users WHERE uid = ?");        $stmt->bind_param("s", $uid);        $stmt->execute();        $stmt->store_result();        $stmt->bind_result($type);        $stmt->fetch();        $stmt->close();        return $type == "doctor";    }    public function getValues($id) {        $stmt = $this->conn->prepare("SELECT value, timestamp FROM indice_values WHERE indice_id = ?");        $stmt->bind_param("s", $id);        $stmt->execute();        $stmt->bind_result($value, $timestamp);        $stmt->store_result();        $values = array();        while ($stmt->fetch()) {            $val["value"] = $value;            $val["timestamp"] = $timestamp;            $values[] = $val;        }        return $values;    }    public function getUidByEmail($email) {        $stmt = $this->conn->prepare("SELECT uid FROM users WHERE email = ?");        $stmt->bind_param("s", $email);        $stmt->execute();        $stmt->bind_result($uid);        $stmt->store_result();        if ($stmt->num_rows > 0) {            $stmt->fetch();            $stmt->close();            return $uid;        } else {            $stmt->close();            return null;        }    }    public function addPatient($doctor_id, $email) {        $uid = $this->getUidByEmail($email);        if ($uid == null) {            $output["error"] = true;            $output["error_details"] = "There is no user with email " . $email;            return $output;        }        $stmt = $this->conn->prepare("SELECT id FROM patients WHERE patient_id = ? AND doctor_id = ?");        $stmt->bind_param("ss", $uid, $doctor_id);        $stmt->execute();        $stmt->bind_result($id);        $stmt->store_result();        $num_rows = $stmt->num_rows;        $stmt->close();        if ($num_rows < 1) {            $stmt = $this->conn->prepare("INSERT INTO patients (doctor_id, patient_id) values(?, ?)");            $stmt->bind_param("ss", $doctor_id, $uid);            $stmt->execute();            $stmt->close();        }        $output["error"] = false;        $output["patients"] = $this->getPatients($doctor_id);        return $output;    }    public function addValue($indice_id, $value) {        $stmt = $this->conn->prepare("INSERT INTO indice_values (indice_id, value, timestamp) values(?, ?, ?)");        $timestamp = $this->getTimestamp();        $stmt->bind_param("sss", $indice_id, $value, $timestamp);        $stmt->execute();        $stmt->close();        return $this->getValues($indice_id);    }    private function getTimestamp() {        return $this->convertFloatToString(round(microtime(true) * 1000));    }    private function convertFloatToString($floatAsString) {        $norm = strval(floatval($floatAsString));        if (($e = strrchr($norm, 'E')) === false) {            return $norm;        }        return str_replace(",", "", number_format($norm, -intval(substr($e, 1))));    }}