<?phpdefine('AUTHENTICATE', 'authenticate');require_once '../include/DbHandler.php';require_once '../include/Config.php';require '../libs/Slim/Slim.php';\Slim\Slim::registerAutoloader();$app = new \Slim\Slim();$user_id = NULL;function authenticate(\Slim\Route $route) {    $headers = apache_request_headers();    $response = array();    $app = \Slim\Slim::getInstance();    if (isset($headers['Api'])) {        $db = new DbHandler();        $api_key = $headers['Api'];        if (!$db->isValidApiKey($api_key)) {            $response["error"] = true;            $response["message"] = "Access Denied. Invalid Api key";            echoResponse(401, $response);            $app->stop();        } else {            global $user_id;            $user_id = $db->getUserId($api_key);        }    } else {        $response["error"] = true;        $response["message"] = "Api key is misssing";        echoResponse(400, $response);        $app->stop();    }}/** * ----------- METHODS WITHOUT AUTHENTICATION --------------------------------- */$app->get("/test", function () {    $x["mrege"] = "da";    echoResponse(200, $x);});$app->post('/register', function () use ($app) {    verifyRequiredParams(array('name', 'email', 'password'));    $response = array();    $name = $app->request->post('name');    $email = $app->request->post('email');    $password = $app->request->post('password');    validateEmail($email);    $db = new DbHandler();    $res = $db->createUser($name, $email, $password);    if ($res["result"] == USER_CREATED_SUCCESSFULLY) {        $response["error"] = false;        $response["user"] = $res["user"];    } else if ($res["result"] == USER_CREATE_FAILED) {        $response["error"] = true;        $response["error_details"] = "An error occurred while registering";    } else if ($res["result"] == USER_ALREADY_EXISTED) {        $response["error"] = true;        $response["error_details"] = "This email is already registered";    }    // echo json response    echoResponse(201, $response);});$app->post('/login', function () use ($app) {    // check for required params    verifyRequiredParams(array("email", "password"));    // reading post params    $email = $app->request()->post('email');    $password = $app->request()->post('password');    $response = array();    $db = new DbHandler();    // check for correct email and password    $res = $db->loginUser($email, $password);    if ($res["result"] == SUCCESS) {        $user = $res["user"];        if ($user != NULL) {            $response["error"] = false;            $response["user"] = $user;        } else {            $response['error'] = true;            $response['error_details'] = "An error occurred. Please try again";        }    } else if ($res["result"] == INVALID_COMBINATION) {        // user credentials are wrong        $response['error'] = true;        $response['error_details'] = 'Incorrect combination';    }    echoResponse(200, $response);});/* * ------------------------ METHODS WITH AUTHENTICATION ------------------------ */$app->get('/indices', AUTHENTICATE, function () {    global $user_id;    $db = new DbHandler();    $output["indices"] = $db->getIndices($user_id);    $output["error"] = false;    echoResponse(200, $output);});$app->get('/indice/:id/values', AUTHENTICATE, function ($id) {    $db = new DbHandler();    $output["values"] = $db->getValues($id);    $output["error"] = false;    echoResponse(200, $output);});$app->post('/indice/:id/add', AUTHENTICATE, function ($id) use ($app) {    if(isset($_POST['value'])){        $db = new DbHandler();        $output["values"] = $db->addValue($id, $_POST['value']);        $output["error"] = false;        echoResponse(200, $output);    }else{        $output["error_message"] = "Missing parameters";        $output["error"] = true;        echoResponse(400, $output);    }});////$app->get('/user/:uid', AUTHENTICATE, function ($uid) {////    global $user_id;//    $db = new DbHandler();////    $user = $db->getUser($user_id, $uid);//    $user["error"] = false;////    echoGZippedResponse(200, $user);////});////$app->get('/getsyncupdates', AUTHENTICATE, function () use ($app) {////    $last_timestamp = NULL;//    if (isset($_REQUEST["last_timestamp"])) {//        $last_timestamp = $_REQUEST["last_timestamp"];//    }////    global $user_id;//    $db = new DbHandler();////    $output = $db->getSyncUpdates($user_id, $last_timestamp);//    $output["error"] = false;////    if (isset($_REQUEST["zip"]) && $_REQUEST["zip"] == "false") {//        echoResponse(200, $output);//    } else {//        echoGZippedResponse(200, $output);//    }////});////$app->post('/user/:uid/message', AUTHENTICATE, function ($uid) use ($app) {////    verifyRequiredParams(array("gcm_id", "device_id"));//    $gcmSender = $app->request()->post("gcm_id");//    $deviceId = $app->request()->post("device_id");////    $pid = NULL;//    $text = NULL;//    $photo = NULL;//    $video = NULL;////    if (isset($_POST['pid'])) {//        $pid = $_POST['pid'];//    }//    if (isset($_POST['text'])) {//        $text = $_POST['text'];//        $find = "\r\n";//        $pos = strrpos($text, $find);//        if ($pos == strlen($text) - strlen($find)) {//            $text = substr($text, 0, $pos);//        }//    }//    if (isset($_FILES['photo'])) {//        $photo = $_FILES['photo'];//    }//    if (isset($_FILES['video'])) {//        $video = $_FILES['video'];//    }////    if ($photo == NULL && $video == NULL && $text == NULL) {//        $output["error"] = true;//        echoResponse(200, $output);//        return;//    }////    $db = new DbHandler();//    global $user_id;////    $mid = $db->sendMessage($user_id, $uid, $text, $photo, $video, $pid, $gcmSender, $deviceId);////    if ($mid == null) {//        $output["error"] = true;//    } else {//        $output["error"] = false;//        $output["mid"] = $mid;//    }////    echoResponse(200, $output);////});////$app->post('/post', AUTHENTICATE, function () {////    $text = NULL;//    $photo = NULL;//    $video = NULL;////    if (isset($_POST['text'])) {//        $text = $_POST['text'];//    }//    if (isset($_FILES['photo'])) {//        $photo = $_FILES['photo'];//    }//    if (isset($_FILES['video'])) {//        $video = $_FILES['video'];//    }//    if ($photo == NULL && $video == NULL && $text == NULL) {//        $output["error"] = false;//        echoResponse(200, $output);//        return;//    }////    $db = new DbHandler();//    global $user_id;////    $pid = $db->post($user_id, $text, $photo, $video);////    if ($pid == null) {//        $output["error"] = true;//    } else {//        $output["error"] = false;//        $output["pid"] = $pid;//    }////    echoResponse(200, $output);////});////$app->post('/user/:uid/follow', AUTHENTICATE, function ($uid) {////    global $user_id;//    $db = new DbHandler();////    $db->followUser($uid, $user_id);////    $output["error"] = false;////    echoResponse(200, $output);////});////$app->post('/user/:uid/unfollow', AUTHENTICATE, function ($uid) {//    global $user_id;//    $db = new DbHandler();//    $db->unfollowUser($uid, $user_id);//    $output["error"] = false;//    echoResponse(200, $output);////});////$app->post('/setgcmid', AUTHENTICATE, function () use ($app) {//    verifyRequiredParams(array("gcm_id", "device_id"));//    $gcm_id = $app->request()->post("gcm_id");//    $device_id = $app->request()->post("device_id");//    global $user_id;//    $db = new DbHandler();//    $db->setGcmId($user_id, $gcm_id, $device_id);//    $output["error"] = false;//    echoResponse(200, $output);//});////function generateRandomString($length = 10) {//    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';//    $charactersLength = strlen($characters);//    $randomString = '';//    for ($i = 0; $i < $length; $i++) {//        $randomString .= $characters[rand(0, $charactersLength - 1)];//    }//    return $randomString;//}/* * ------------------------ HELPER METHODS ------------------------ */function verifyRequiredParams($required_fields) {    $error = false;    $error_fields = "";    $request_params = $_REQUEST;    if ($_SERVER['REQUEST_METHOD'] == 'PUT') {        $app = \Slim\Slim::getInstance();        parse_str($app->request()->getBody(), $request_params);    }    foreach ($required_fields as $field) {        if (!isset($request_params[$field]) || strlen(trim($request_params[$field])) <= 0) {            $error = true;            $error_fields .= $field . ', ';        }    }    if ($error) {        $response = array();        $app = \Slim\Slim::getInstance();        $response["error"] = true;        $response["error_details"] = 'Required field(s) ' . substr($error_fields, 0, -2) . ' is missing or empty';        echoResponse(400, $response);        $app->stop();    }}function validateEmail($email) {    $app = \Slim\Slim::getInstance();    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {        $response["error"] = true;        $response["error_details"] = 'Email address is not valid';        echoResponse(400, $response);        $app->stop();    }}function echoResponse($status_code, $response) {    $app = \Slim\Slim::getInstance();    $app->status($status_code);    $app->contentType('application/json');    echo json_encode($response);}function echoGZippedResponse($status_code, $response) {    $app = \Slim\Slim::getInstance();    $app->status($status_code);    $app->contentType('application/x-gzip');    echo gzcompress(json_encode($response), -1);}$app->run();