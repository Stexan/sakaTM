<?phpclass DbHandler {    private $conn;    function __construct() {        require_once 'DbConnect.php';        $db = new DbConnect();        $this->conn = $db->connect();    }    public function createUser($name, $email, $password) {        require_once 'PassHash.php';        if (!$this->userExists($email)) {            $salt = PassHash::generateSalt();            $password = PassHash::hashPassword($password, $salt);            $api_key = $this->generateApiKey();            $stmt = $this->conn->prepare("INSERT INTO users (name, email, password, salt, api_key, joined_at) values(?, ?, ?, ?, ?, ?)");            $timestamp = $this->getTimestamp();            $stmt->bind_param("ssssss", $name, $email, $password, $salt, $api_key, $timestamp);            $result = $stmt->execute();            $uid = $this->conn->insert_id;            $stmt->close();            // Check for successful insertion            if ($result) {                // User successfully inserted                $response['result'] = USER_CREATED_SUCCESSFULLY;                $user['uid'] = $uid;                $user['api_key'] = $api_key;                $response['user'] = $user;                $this->insertDefaultIndices($uid);            } else {                // Failed to create user                $response['result'] = USER_CREATE_FAILED;            }        } else {            $response['result'] = USER_ALREADY_EXISTED;        }        return $response;    }    public function loginUser($email, $password) {        require_once 'PassHash.php';        $stmt = $this->conn->prepare("SELECT uid, name, password, salt, api_key FROM users WHERE email = ?");        $stmt->bind_param("s", $email);        $stmt->execute();        $stmt->bind_result($uid, $name, $hashed_password, $salt, $api_key);        $stmt->store_result();        if ($stmt->num_rows > 0) {            $stmt->fetch();            $stmt->close();            if ($hashed_password == PassHash::hashPassword($password, $salt)) {                // user password is correct or uses facebook to log in existing account                $output['result'] = SUCCESS;                $user['uid'] = $uid;                $user['name'] = $name;                $user['api_key'] = $api_key;                $output['user'] = $user;            } else {                // user password is incorrect                $output['result'] = INVALID_COMBINATION;            }        } else {            $stmt->close();            $output['result'] = INVALID_COMBINATION;        }        return $output;    }    public function insertDefaultIndices($uid) {        $name = "Weight";        $max_value = "100kg";        $min_value = "60kg";        $stmt = $this->conn->prepare("INSERT INTO indices (name, min_value, max_value, uid) values(?, ?, ?, ?)");        $stmt->bind_param("ssss", $name, $min_value, $max_value, $uid);        $stmt->execute();        $name = "Blood pressure";        $max_value = "120";        $min_value = "50";        $stmt = $this->conn->prepare("INSERT INTO indices (name, min_value, max_value, uid) values(?, ?, ?, ?)");        $stmt->bind_param("ssss", $name, $min_value, $max_value, $uid);        $stmt->execute();    }    public function userExists($email) {        $stmt = $this->conn->prepare("SELECT uid from users WHERE email = ?");        $stmt->bind_param("s", $email);        $stmt->execute();        $stmt->store_result();        $num_rows = $stmt->num_rows;        $stmt->close();        return $num_rows > 0;    }    public function getApiKeyById($user_id) {        $stmt = $this->conn->prepare("SELECT api_key FROM users WHERE uid = ?");        $stmt->bind_param("s", $user_id);        if ($stmt->execute()) {            $api_key = $stmt->get_result()->fetch_assoc();            $stmt->close();            return $api_key;        } else {            return NULL;        }    }    public function getUserId($api_key) {        $stmt = $this->conn->prepare("SELECT uid FROM users WHERE api_key = ?");        $stmt->bind_param("s", $api_key);        $stmt->execute();        $stmt->store_result();        $stmt->bind_result($user_id);        $stmt->fetch();        $stmt->close();        return $user_id;    }    public function isValidApiKey($api_key) {        $stmt = $this->conn->prepare("SELECT uid from users WHERE api_key = ?");        $stmt->bind_param("s", $api_key);        $stmt->execute();        $stmt->store_result();        $num_rows = $stmt->num_rows;        $stmt->close();        return $num_rows > 0;    }    private function generateApiKey() {        return md5(uniqid(rand(), true));    }    public function getIndices($uid) {        $stmt = $this->conn->prepare("SELECT id, name, max_value, min_value,        (SELECT value FROM indice_values WHERE indice_id = indices.id ORDER BY timestamp DESC LIMIT 1),        (SELECT timestamp FROM indice_values WHERE indice_id = indices.id ORDER BY timestamp DESC LIMIT 1)        FROM indices WHERE uid = ?");        $stmt->bind_param("s", $uid);        $stmt->execute();        $stmt->bind_result($id, $name, $max_value, $min_value, $value, $timestamp);        $stmt->store_result();        $indices = array();        while ($stmt->fetch()) {            $ind["id"] = $id;            $ind["name"] = $name;            $ind["max_value"] = $max_value;            $ind["min_value"] = $min_value;            $ind["current_value"] = $value;            $ind["current_value_timestamp"] = $timestamp;            $indices[] = $ind;        }        return $indices;    }    public function getValues($id) {        $stmt = $this->conn->prepare("SELECT value, timestamp FROM indice_values WHERE indice_id = ?");        $stmt->bind_param("s", $id);        $stmt->execute();        $stmt->bind_result($value, $timestamp);        $stmt->store_result();        $values = array();        while ($stmt->fetch()) {            $val["value"] = $value;            $val["timestamp"] = $timestamp;            $values[] = $val;        }        return $values;    }    public function addValue($indice_id, $value) {        $stmt = $this->conn->prepare("INSERT INTO indice_values (indice_id, value, timestamp) values(?, ?, ?)");        $timestamp = $this->getTimestamp();        $stmt->bind_param("sss", $indice_id, $value, $timestamp);        $stmt->execute();        $stmt->close();        return $this->getValues($indice_id);    }//////    public function post($user_id, $text, $photo, $video) {//        $fullPhotoPath = NULL;//        $fullVideoPath = NULL;//        $timestamp = $this->getTimestamp();//        if ($photo != NULL) {//            $photoName = md5(basename($photo["name"]) . microtime(true) . $user_id) . ".jpg";//            $photoPath = "../media/photos/" . $photoName;//            $fullPhotoPath = "http://trimitesmsgratuit.ro/tregue/media/photos/" . $photoName;//            $im = new Imagick();//            $im->readImage($photo["tmp_name"]);//            $im->scaleImage(500, 0);//            $im->writeImage($photoPath);//            $im->clear();//            $im->destroy();//        }//        if ($video != NULL) {//            $videoName = md5(basename($photo["name"]) . microtime(true) . $user_id) . ".mp4";//            $videoPath = "../media/videos/" . $videoName;//            $fullVideoPath = "http://trimitesmsgratuit.ro/tregue/media/videos/" . $videoName;//            if (!move_uploaded_file($video["tmp_name"], $videoPath)) {//                return NULL;//            }//        }////        $insert_stmt = $this->conn->prepare("INSERT INTO posts (uid, text, photo, video, timestamp) VALUES (?, ?, ?, ?, ?)");//        $insert_stmt->bind_param('ssss', $user_id, $text, $fullPhotoPath, $fullVideoPath, $timestamp);//        $insert_stmt->execute();//        $pid = $this->conn->insert_id;////        $stmt = $this->conn->prepare("SELECT MAX(uid) AS max_uid FROM users LIMIT 1");//        $stmt->bind_result($max_uid);//        $stmt->execute();//        $stmt->store_result();//        $stmt->fetch();////        $length = $max_uid > 30 ? 30 : $max_uid - 1;////        $used_ids = array();////        for ($i = 0; $i < $length; $i++) {//            do {//                $uid = rand(1, $max_uid);//            } while ($uid == $user_id || in_array($uid, $used_ids));//            $used_ids[] = $uid;//            $insert_stmt = $this->conn->prepare("INSERT INTO random_posts (uid, pid) VALUES (?, ?)");//            $insert_stmt->bind_param('ss', $uid, $pid);//            $insert_stmt->execute();//        }////        return $pid;//    }////    public function getSyncUpdates($user_id, $last_timestamp) {//        if ($last_timestamp == NULL) {//            $stmt = $this->conn->prepare("SELECT m.mid, m.text, m.photo, m.video, m.pid_reply, m.timestamp, m.uid_sender, m.uid_receiver//                  FROM messages m WHERE (m.uid_receiver = ? OR m.uid_sender = ?) ORDER BY timestamp");//            $stmt->bind_param("ss", $user_id, $user_id);//        } else {//            $stmt = $this->conn->prepare("SELECT m.mid, m.text, m.photo, m.video, m.pid_reply, m.timestamp, m.uid_sender, m.uid_receiver//                  FROM messages m WHERE (m.uid_receiver = ? OR m.uid_sender = ?) AND timestamp > ? ORDER BY timestamp");//            $stmt->bind_param("sss", $user_id, $user_id, $last_timestamp);//        }//        $stmt->execute();//        $stmt->bind_result($mid, $text, $photo, $video, $pid_reply, $timestamp, $uid_sender, $uid_receiver);//        $stmt->store_result();////        $postsIds = array();//        $messages = array();//        while ($stmt->fetch()) {////            $message["mid"] = $mid;//            if ($text == null) {//                $message["text"] = "";//            } else {//                $message["text"] = $text;//            }//            $message["photo"] = $photo;//            $message["video"] = $video;//            $message["pid_reply"] = $pid_reply;//            $message["timestamp"] = $timestamp;//            $message["uid_sender"] = $uid_sender;//            $message["uid_receiver"] = $uid_receiver;////            if ($pid_reply != NULL) {//                $postsIds[] = $pid_reply;//            }////            $messages[] = $message;//        }////        $stmt = $this->conn->prepare("SELECT DISTINCT u.uid, u.name, u.profile_picture, u.last_update FROM messages m INNER JOIN users u ON m.uid_receiver = u.uid//                                WHERE m.uid_sender = ? UNION SELECT DISTINCT u.uid, u.name, u.profile_picture, u.last_update FROM messages m INNER JOIN users u//                                ON m.uid_sender = u.uid WHERE m.uid_receiver = ? UNION SELECT u.uid, u.name, u.profile_picture, u.last_update FROM users u//                                WHERE u.uid = ? GROUP BY u.uid");//        $stmt->bind_param("sss", $user_id, $user_id, $user_id);////        $stmt->execute();//        $stmt->bind_result($uid, $name, $profile_picture, $last_update);//        $stmt->store_result();//        $users = array();//        while ($stmt->fetch()) {//            $user["uid"] = $uid;//            $user["name"] = $name;//            $user["profile_picture"] = $profile_picture;//            $user["last_update"] = $last_update;//            $users[] = $user;//        }//        $posts = array();//        if (count($postsIds) > 0) {//            $in = join(',', $postsIds);//            $stmt = $this->conn->prepare("SELECT pid, uid, text, photo, video, timestamp FROM posts WHERE pid IN ($in)");//            $stmt->execute();//            $stmt->bind_result($pid, $uid, $text, $photo, $video, $timestamp);//            $stmt->store_result();//            while ($stmt->fetch()) {//                $post["pid"] = $pid;//                $post["uid"] = $uid;//                $post["text"] = $text;//                $post["photo"] = $photo;//                $post["video"] = $video;//                $post["timestamp"] = $timestamp;//                $posts[] = $post;//            }//        }////        $output = array();////        $output["current_timestamp"] = $this->getTimestamp();//        $output["messages"] = $messages;//        $output["message_posts"] = $posts;//        $output["users"] = $users;////        return $output;//    }////    public function getFeed($user_id) {//        $stmt = $this->conn->prepare("SELECT p.pid, p.uid, p.text, p.photo, p.video, p.timestamp, u.name, u.profile_picture FROM posts p//                    LEFT JOIN follow f ON f.uid_followed = p.uid LEFT JOIN random_posts rp ON rp.pid = p.pid LEFT JOIN users u ON u.uid = p.uid//                    WHERE f.uid_follower = ? OR p.uid = ? OR rp.uid = ? GROUP BY p.pid, p.uid ORDER BY p.timestamp DESC");//        $stmt->bind_param("sss", $user_id, $user_id, $user_id);//        $stmt->execute();//        $stmt->bind_result($pid, $uid, $text, $photo, $video, $timestamp, $name, $profile_picture);//        $stmt->store_result();//        $posts = array();//        while ($stmt->fetch()) {//            $post['pid'] = $pid;//            $post['uid'] = $uid;//            $post['name'] = $name;//            $post['profile_picture'] = $profile_picture;//            $post['text'] = $text;//            $post['photo'] = $photo;//            $post['video'] = $video;//            $post['timestamp'] = $timestamp;//            $posts[] = $post;//        }//        return $posts;//    }////    public function getUser($user_id, $uid) {//        $stmt = $this->conn->prepare("SELECT u.uid, u.name, u.profile_picture,//               (SELECT COUNT(*) FROM follow f WHERE f.uid_follower = ? AND f.uid_followed = u.uid LIMIT 1) as is_followed,//               (SELECT COUNT(*) FROM posts p WHERE p.uid = u.uid) as posts_number FROM users u WHERE u.uid = ? LIMIT 1");//        $stmt->bind_param("ss", $user_id, $uid);//        $stmt->execute();//        $stmt->bind_result($uid, $name, $profile_picture, $is_followed, $posts_number);//        $stmt->store_result();//        $stmt->fetch();//        $user['uid'] = $uid;//        $user['name'] = $name;//        $user['profile_picture'] = $profile_picture;//        $user['posts_number'] = $posts_number;//        $user['is_followed'] = $is_followed;////        $stmt = $this->conn->prepare("SELECT p.pid, p.text, p.photo, p.video, p.timestamp FROM posts p WHERE p.uid = ? ORDER BY p.timestamp DESC");//        $stmt->bind_param("s", $uid);//        $stmt->execute();//        $stmt->bind_result($pid, $text, $photo, $video, $timestamp);//        $stmt->store_result();//        $posts = array();//        while ($stmt->fetch()) {//            $post['pid'] = $pid;//            $post['uid'] = $uid;//            $post['name'] = $name;//            $post['profile_picture'] = $profile_picture;//            $post['text'] = $text;//            $post['photo'] = $photo;//            $post['video'] = $video;//            $post['timestamp'] = $timestamp;//            $posts[] = $post;//        }//        $user["posts"] = $posts;//        return $user;//    }////    public function followUser($uid, $user_id) {//        if ($uid == $user_id) {//            return false;//        }//        $insert_stmt = $this->conn->prepare("DELETE FROM follow WHERE uid_follower = ? AND uid_followed = ?");//        $insert_stmt->bind_param('ss', $user_id, $uid);//        $insert_stmt->execute();//        $insert_stmt = $this->conn->prepare("INSERT INTO follow (uid_follower, uid_followed) VALUES (?, ?)");//        $insert_stmt->bind_param('ss', $user_id, $uid);//        $result = $insert_stmt->execute();//        return $result;//    }////    public function unfollowUser($uid, $user_id) {//        if ($uid == $user_id) {//            return false;//        }//        $insert_stmt = $this->conn->prepare("DELETE FROM follow WHERE uid_follower = ? AND uid_followed = ?");//        $insert_stmt->bind_param('ss', $user_id, $uid);//        return $insert_stmt->execute();//    }////    public function setGcmId($user_id, $gcm_id, $device_id) {//        $insert_stmt = $this->conn->prepare("DELETE FROM gcm_ids WHERE gcm_id = ? OR device_id = ?");//        $insert_stmt->bind_param('ss', $gcm_id, $device_id);//        $insert_stmt->execute();//        $insert_stmt = $this->conn->prepare("INSERT INTO gcm_ids (uid, gcm_id, device_id) VALUES (?, ?, ?)");//        $insert_stmt->bind_param('sss', $user_id, $gcm_id, $device_id);//        $result = $insert_stmt->execute();//        return $result;//    }////    private function getHashtags($string) {//        $hashtags = FALSE;//        preg_match_all("/(#\w+)/u", $string, $matches);//        if ($matches) {//            $hashtagsArray = array_count_values($matches[0]);//            $hashtags = array_keys($hashtagsArray);//        }//        return $hashtags;//    }////    public function setProfilePicture($user_id, $photo) {//        $photoName = md5(basename($photo["name"]) . microtime(true) . $user_id) . ".jpg";//        $photoPath = "../media/profilepictures/" . $photoName;//        $fullPhotoPath = "http://trimitesmsgratuit.ro/tregue/media/profilepictures/" . $photoName;////        $im = new Imagick();//        $im->readImage($photo["tmp_name"]);//        $im->scaleImage(200, 0);//        $im->writeImage($photoPath);//        $im->clear();//        $im->destroy();////        $stmt = $this->conn->prepare("SELECT profile_picture FROM users WHERE uid = ?");//        $stmt->bind_param('s', $user_id);//        $stmt->execute();//        $stmt->store_result();//        $stmt->bind_result($oldPhoto);//        $stmt->fetch();////        $oldPhoto = substr($oldPhoto, strrpos($oldPhoto, '/') + 1);//        $oldPhotoPath = "../media/profilepictures/" . $oldPhoto;//        if (file_exists($oldPhotoPath)) {//            unlink($oldPhotoPath);//        }////        $insert_stmt = $this->conn->prepare("UPDATE users SET profile_picture = ?, last_update = ? WHERE uid = ?");//        $timestamp = $this->getTimestamp();//        $insert_stmt->bind_param('ss', $fullPhotoPath, $timestamp, $user_id);//        return $insert_stmt->execute();//    }    private function getTimestamp() {        return $this->convertFloatToString(round(microtime(true) * 1000));    }    private function convertFloatToString($floatAsString) {        $norm = strval(floatval($floatAsString));        if (($e = strrchr($norm, 'E')) === false) {            return $norm;        }        return str_replace(",", "", number_format($norm, -intval(substr($e, 1))));    }}